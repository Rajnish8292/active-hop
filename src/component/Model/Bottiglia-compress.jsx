/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/bottiglia-compress.glb --transform 
Files: public/bottiglia-compress.glb [1.75MB] > D:\workspace\1_projects\active-hop\bottiglia-compress-transformed.glb [93.31KB] (95%)
*/

import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { ShaderMaterial } from "three";
import { useLoader } from "@react-three/fiber";
import { TextureLoader } from "three";
import gsap from "gsap";
const VERTEX_SHADER = `
varying vec3 pos;
varying vec2 vUv;
void main() {
    vUv = uv;
    vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);
    gl_Position = projectionMatrix * modelViewPosition; 
}
`;

const FRAGMENT_SHADER = `
  varying vec2 vUv; 
  uniform sampler2D uSourceTexture;
  uniform sampler2D uTargetTexture;
  uniform float uTextureProgress;
  uniform float uPixel;
  uniform bool uIsPixelated;

  void main() {
    float pixelCount = uPixel;
    vec2 flippedUV = vec2(vUv.x, 1.0-vUv.y);
  if(pixelCount == 512.0) {

    vec4 sourceTexture = texture2D(uSourceTexture, flippedUV);
    vec4 targetTexture = texture2D(uTargetTexture, flippedUV);
    vec4 color = mix(sourceTexture, targetTexture, uTextureProgress);
    gl_FragColor = color;

   } else {

    vec2 pixelatedUV = floor( flippedUV * pixelCount) / pixelCount;
    vec4 sourceTexture = texture2D(uSourceTexture, pixelatedUV);
    vec4 targetTexture = texture2D(uTargetTexture, pixelatedUV);
    vec4 color = mix(sourceTexture, targetTexture, uTextureProgress);
    gl_FragColor = color;
    }

  }
`;
export function Model(props) {
  const group = React.useRef();

  const { nodes, materials, animations } = useGLTF(
    "/bottiglia-compress-transformed.glb"
  );

  const initialTexture = useLoader(
    TextureLoader,
    "texture/ActiveHop_etichetta__01_trail.jpg"
  );

  const uniforms = useRef({
    uPixel: { value: 512 },
    uIsPixelated: { value: true },
    uSourceTexture: { value: initialTexture },
    uTargetTexture: { value: initialTexture },
    uTextureProgress: { value: 1.0 },
  });

  const shaderMaterial = useRef(null);
  const material = new ShaderMaterial();
  material.fragmentShader = FRAGMENT_SHADER;
  material.vertexShader = VERTEX_SHADER;
  material.uniforms = uniforms.current;
  shaderMaterial.current = material;

  const changeTextureTo = (url) => {
    // const texture = useLoader(TextureLoader, url);
    uniforms.current.uSourceTexture = { ...uniforms.current.uTargetTexture };
    uniforms.current.uTargetTexture = { value: new TextureLoader().load(url) };
    shaderMaterial.current.uniformsNeedUpdate = true;
    uniforms.current.uTextureProgress.value = 0;
    const tween = gsap.to(uniforms.current.uTextureProgress, {
      value: 1,
      duration: 0.25,
    });
    console.log("change texture to ", url);
  };

  const animateAndChangeTexture = (url) => {
    const tl = gsap.timeline();
    let isAnimating = false;

    tl.to(uniforms.current.uPixel, {
      value: 32,
      duration: 0.5,
      ease: "expo.out",
      onUpdate: function () {
        const progress = this.progress() * 100;
        if (progress >= 50 && !isAnimating) {
          changeTextureTo(url);
          isAnimating = true;
        }
      },
    }).to(uniforms.current.uPixel, {
      value: 512,
      duration: 0.75,
      delay: 0.25,
      ease: "expo.in",
    });
  };

  useEffect(() => {
    const id = setTimeout(() => {
      animateAndChangeTexture("texture/ActiveHop_etichetta__01_rad.jpg");
    }, 2000);

    const id2 = setTimeout(() => {
      animateAndChangeTexture("texture/ActiveHop_etichetta__01_trail.jpg");
    }, 5000);

    const id3 = setTimeout(() => {
      animateAndChangeTexture("texture/ActiveHop_etichetta__01_drop.jpg");
    }, 8000);

    return () => {
      clearTimeout(id);
      clearTimeout(id2);
      clearTimeout(id3);
    };
  }, []);
  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      scale={[25, 25, 25]}
      position={[0, -2, 0]}
      rotation={[0, 0, 0]}
    >
      <group>
        <group name="Bottiglia">
          <mesh
            name="Tappo"
            geometry={nodes.Tappo.geometry}
            material={materials.Mat}
          />
        </group>
        <mesh
          name="Etichetta"
          geometry={nodes.Etichetta.geometry}
          material={shaderMaterial.current}
          position={[0, 0.069, 0]}
          rotation={[Math.PI / 2, 0, -Math.PI]}
        />
        <mesh
          name="Bottiglia_1"
          geometry={nodes.Bottiglia_1.geometry}
          material={materials.Mat}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/bottiglia-compress-transformed.glb");
